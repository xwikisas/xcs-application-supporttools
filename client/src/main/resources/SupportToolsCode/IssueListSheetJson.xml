<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>SupportToolsCode</web>
<name>IssueListSheetJson</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1420066800000</creationDate>
<date>1420066800000</date>
<contentUpdateDate>1420066800000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>true</hidden>
<content>{{include document="SupportCode.JiraGroovy"/}}

{{groovy}}

def jiraProxy = new JiraSessionObjects(xwiki);

System.out.println(jiraProxy.projectId)

def projname = jiraProxy.projectId;
def project = jiraProxy.jira.getProjectByKey(jiraProxy.token, projname);
def components = jiraProxy.jira.getComponents(jiraProxy.token, projname);
def compid = request.component
def limit = request.limit
if (limit) {
  try {
    limit = Integer.parseInt(limit);
  } catch(err) {
    limit = 20000;
  }
} else {
  limit = 20000;
}
def networkAccountDoc = xwiki.getDocument(services.networkcontext.getAccount(xcontext.user));
def networkAccountName = networkAccountDoc.name;
def netAccJQL = "AND \"Network Account\"=" + networkAccountName;
def compJQL = "";
if (compid &amp;&amp; compid != '0') {
  compJQL = "AND component=${compid}";
}
def resJQL = "AND resolution=unresolved";

if(request.status == "done") {
  resJQL = "AND status in (Resolved, Closed) ";
} else if(request.status == "all") {
  resJQL = "";
}
def jql = "project=${project.id} ${netAccJQL} ${compJQL} ${resJQL} ORDER BY updatedDate DESC";
def issues = jiraProxy.jira.getIssuesFromJqlSearch(jiraProxy.token, jql, limit);
def datetool = new org.apache.velocity.tools.generic.DateTool()
def jiraPretty = new JiraIssuePrettyfier(jiraProxy.jira, project.id, jiraProxy.token);
def data = [ issues :
        issues.collect {
              [ key: it.key,
                url :  xwiki.getDocument("Support.TicketPage").getExternalURL("view", "ikey=${it.key}"),
                type: it.type,
                typePretty : jiraPretty.getIssuePropertyPretty('type', it.type),
                summary: it.summary,
                status: it.status,
                statusPretty : jiraPretty.getIssuePropertyPretty('status', it.status),
                created: it.created.time,
                createdPretty: datetool.format('yyyy/MM/dd HH:mm', it.created.time),
                updated: it.updated.time,
                updatedPretty: datetool.format('yyyy/MM/dd HH:mm', it.updated.time)
              ]}
    ]
def json = new groovy.json.JsonBuilder(data)
println json.toPrettyString()
{{/groovy}}</content></xwikidoc>
