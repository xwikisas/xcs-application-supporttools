<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>SupportToolsCode</web>
  <name>Groovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1420066800000</creationDate>
  <date>1420066800000</date>
  <contentUpdateDate>1420066800000</contentUpdateDate>
  <version>1.1</version>
  <title>Support Tools Groovy Code</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>import org.xwiki.environment.Environment;
import org.apache.commons.io.FileUtils;
import java.util.zip.*;

import org.apache.http.client.*
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;
import org.apache.http.entity.*;
import org.apache.http.entity.mime.content.*;
import org.apache.http.entity.mime.*;
import org.apache.http.conn.ssl.*;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.auth.*;
import java.security.cert.*;
import java.security.SecureRandom;
import org.apache.commons.codec.binary.Base64;
import javax.net.ssl.*;
import groovy.json.*;


public class SupportTools {

  def REPORTVERSION = "1.0"
  def bypassSSLChecks = true;
  def defaultServerURL = "https://network.xwikisas.com/";
  def defaultClientName = "Unknown";
  def defaultClientUsername = "Unknown";
  def defaultClientPassword = "";
  
  def serverURL = defaultServerURL;
  def clientName = defaultClientName;
  def clientUsername = defaultClientUsername;
  def clientPassword = defaultClientPassword;
  def xwiki;
  def xcontext;
  def services;
  def jobId;
  def jobStarted = false;
  def environment;
  def debugMsg = "";
  def int BUFFER = 2048;

  public debug(msg) {
    debugMsg += msg + "\n";
    System.out.println(msg);
  }
  

  public setXWiki(xwiki, xcontext, services) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.services = services;
    this.environment = services.component.getInstance(Environment.class);

    def configDoc = xwiki.getDocument("SupportToolsCode.Config")
    serverURL = configDoc.getValue("server");
    clientName = configDoc.getValue("clientName");
    clientPassword = configDoc.getValue("clientPassword");
    clientUsername = configDoc.getValue("clientUsername");
    if (serverURL == null || serverURL=="")
     serverURL = defaultServerURL;
    if (clientName == null || clientName == "")
     clientName = defaultClientName;
    if (clientUsername == null || clientUsername == "")
     clientUsername = defaultclientUsername;
    if (clientPassword==null) 
     clientPassword = "";
  }

  public getHttpClient() {
    def httpClient = HttpClientBuilder.create().build();

    // This code is used for testing only using servers without proper SSL certificates
    if (bypassSSLChecks) {
     def sslContext = SSLContext.getInstance("SSL");
     def tm = new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {

                        return null;
                    }

                    public void checkClientTrusted(
                            X509Certificate[] certs, String authType) {

                    }

                    public void checkServerTrusted(
                            X509Certificate[] certs, String authType) {

                    }
                }
   X509TrustManager[] tms = new X509TrustManager[1];
   tms[0] = tm;
   sslContext.init(null, tms, new SecureRandom());
   def socketFactory = new SSLConnectionSocketFactory(sslContext,SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
   httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();
   }

   return httpClient;
  }

  def getAuthHttpContext() {
   // authentication
   def creds = new UsernamePasswordCredentials(clientUsername, clientPassword);
   def credsProvider = new BasicCredentialsProvider()
   credsProvider.setCredentials(AuthScope.ANY, , creds);
   def httpContext = HttpClientContext.create();
   httpContext.setCredentialsProvider(credsProvider);
   return httpContext;
  }


  public long startJob() {
    if (jobStarted)
     return -1;
    
    jobId = (new Date()).getTime();
    jobStarted = true;
    return jobId;
  }

  public endJob() {
    jobStarted = false;   
  } 

  /* Clear all the storage directory */
  public clearStorageDirectory() {
	FileUtils.deleteDirectory(getReportsDirectory());
  }

  public getReportsDirectory() {
   return new File(environment.permanentDirectory, "/supporttools/");
  }

  public getHeapDumpsDirectory() {
   return new File(environment.permanentDirectory, "/supporttools/heapdumps/");
  }

  public getStorageDirectory() {
    getStorageDirectory(jobId);
  }

  public getStorageDirectory(id) {
    return new File(environment.permanentDirectory, "/supporttools/" + id + "/");
  }

  public getReportFile(id) {
    return new File(getStorageDirectory(id), "report${id}.zip");
  }

  public getHeapDumpFile(id) {
    return new File(getHeapDumpsDirectory(), "heapdump${id}.zip");
  }

  /*
    Create a zip file out of all the files in the directory
  */
  public makeZip() {
   def wikiURL = xwiki.getDocument("Main.WebHome").getExternalURL();

   def strinfo = """reportVersion/${REPORTVERSION}
wiki: ${wikiURL}
client: ${clientName}
id: ${jobId}
xwikiVersion: ${xwiki.getVersion()}
"""
   // add info file
   addString("info.txt", strinfo);

     def targetFile = new File(getStorageDirectory(), "report${jobId}.zip");
     def dest = new FileOutputStream(targetFile);
     def zipout = new  ZipOutputStream(new BufferedOutputStream(dest)); 
     def sourceDir = new File(getStorageDirectory(), "/report/");
     def files = sourceDir.listFiles();
     def data = new byte[BUFFER];

     for (int i=0; i&lt;files.length; i++) {
        debug("Adding: " + files[i]);
        def fi = new FileInputStream(files[i]);
        def origin = new BufferedInputStream(fi, BUFFER);
        ZipEntry entry = new ZipEntry(files[i].getName());
        zipout.putNextEntry(entry);
        int count;
        while((count = origin.read(data, 0, 
              BUFFER)) != -1) {
               zipout.write(data, 0, count);
        }
        origin.close();
     }
     zipout.close();
  }

 /*
    Create a zip file out of all the files in the directory
  */
  public makeHeapDumpZip(file) {
   def wikiURL = xwiki.getDocument("Main.WebHome").getExternalURL();

   def strinfo = """heapdump/${REPORTVERSION}
wiki: ${wikiURL}
client: ${clientName}
id: ${jobId}
xwikiVersion: ${xwiki.getVersion()}
"""

     def targetFile = new File(getHeapDumpsDirectory(), "heapdump${jobId}.zip");
     // force parent dir creation
     FileUtils.forceMkdir(getHeapDumpsDirectory());
     def dest = new FileOutputStream(targetFile);
     def zipout = new  ZipOutputStream(new BufferedOutputStream(dest)); 
     def data = new byte[BUFFER];

     debug("Adding heap file");
     def fi = new FileInputStream(file);
     def origin = new BufferedInputStream(fi, BUFFER);
     ZipEntry entry = new ZipEntry(file.getName());
     zipout.putNextEntry(entry);
     int count;
     while((count = origin.read(data, 0, 
              BUFFER)) != -1) {
               zipout.write(data, 0, count);
        }
     origin.close();
     entry = new ZipEntry("info.txt");
     zipout.write(strinfo.getBytes());
     zipout.close();
     return targetFile;
  }

public sendFile() {
  def targetFile = new File(getStorageDirectory(), "report${jobId}.zip");
  return sendFile(targetFile);
}

  public sendFile(targetFile) {
try {
   def httpClient = getHttpClient()

   def post = new HttpPost(serverURL + "/xwiki/bin/view/Reports/NewReport");
   def fileBody = new FileBody(targetFile, ContentType.DEFAULT_BINARY);  
   def wikiURL = xwiki.getDocument("Main.WebHome").getExternalURL();
 
   // 
   def builder = MultipartEntityBuilder.create();
   builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
   builder.addPart("file", fileBody);
   builder.addPart("id", new StringBody("" + jobId));
   builder.addPart("client", new StringBody(clientName));
   builder.addPart("password", new StringBody(clientPassword));
   builder.addPart("wiki", new StringBody(wikiURL));
   builder.addPart("xwikiVersion", new StringBody(xwiki.getVersion()));
   builder.addPart("reportVersion", new StringBody(REPORTVERSION));
   builder.addPart("xpage", new StringBody("plain"));
   builder.addPart("outputSyntax", new StringBody("plain"));
   def entity = builder.build();
   //
   post.setEntity(entity);
   def handler = new BasicResponseHandler();
   def response = httpClient.execute(post);
   debug("Response code: " + response.getStatusLine().getStatusCode());
   String result = handler.handleResponse(response);
   debug("Response: " + result);
   if (result.startsWith("SUCCESS"))
    return true;
   else 
    return false;
} catch (Throwable e) {
   debug("Exception: " + e.getMessage());
   e.printStackTrace();
   return false;
}
  }

public boolean sendReport() {
try {
 startJob()
 addXWikiFile("xwiki.cfg")
 addXWikiFile("xwiki.properties")
 addXWikiFile("hibernate.cfg.xml")
 addXWikiFile("web.xml")
 addXWikiPage("Admin.CheckXWikiConfig")
 addXWikiPage("Admin.CheckProgrammingRights")
 addXWikiPage("Admin.ShowRights")
 addXWikiPage("Admin.UsedSpace")
 addXWikiPage("Admin.CheckDBEncoding")
 addXWikiPage("SupportToolsCode.ActivityReport")
 addXWikiPage("SupportToolsCode.JavaMelodyReport")
 addXWikiPage("SupportToolsCode.ClusterConfig")
 addXWikiPage("SupportToolsCode.JMXCacheStatistics")
 addXWikiPage("SupportToolsCode.JMXReport")
 addXWikiPage("SupportToolsCode.ThreadDump")
 addXWikiPage("SupportToolsCode.SolrReport")
 addWEBINFListing()
 addServerCommand("xwiki-workdir", "ls -lR /usr/local/xwiki-workdir/")
 addServerCommand("tomcat-server.xml", "cat /usr/local/tomcat/conf/server.xml")
 addServerCommand("tomcat-web.xml", "cat /usr/local/tomcat/conf/web.xml")
 addServerCommand("tomcat-context.xml", "cat /usr/local/tomcat/conf/context.xml")
 addServerCommand("top", "top -b -n 3 -d0.5")
 addServerCommand("df", "df -h")
 addServerCommand("javaThreads", "ps -L -C java")
 addServerCommand("log-catalina", "tail -10000 /usr/local/tomcat/logs/catalina.out")
 // the following commands not work because of process rights on the server
 addServerCommand("xinit", "/etc/init.d/xwiki.sh show-report")
 addServerCommand("apache2", "cat /etc/apache2/*.conf")
 addServerCommand("apache2sites", "cat /etc/apache2/sites-enabled/*")
 // this one should be last because it seems to play with the database connection making context switches fail
 addXWikiPage("Admin.CheckIndexes")
 makeZip();
 return sendFile();
} finally {
 endJob();
}
}

public boolean sendHeapDump(file) {
try {
 startJob()
 sendFile(makeHeapDumpZip(file));
} finally {
 endJob();
}
}

  public downloadReport(id) {
   def targetFile = getReportFile(id)
   xcontext.response.setContentType("application/octet-stream");
   xcontext.response.setHeader("Content-Disposition", "attachment; filename=report" + id + ".zip")
   def fos = xcontext.response.getOutputStream();
   FileUtils.copyFile(targetFile, fos)
   xcontext.setFinished(true);
  }

  public listReports() {
   def str = ""
   def repDir = getReportsDirectory();
   // force parent dir creation
   FileUtils.forceMkdir(repDir);
     
   for (file in repDir.listFiles()) {
    try {
     def date = new Date(Long.parseLong(file.name))
     def text = services.localization.render("supporttools.downloadreport.reportfrom", [date])
     str += """* [[${text}&gt;&gt;||queryString="id=${file.name}"]]\n""";
    } catch (e) {
    }
   }
   return str;
  }

  public downloadHeapDump(filename) {
   def targetFile = new File(getHeapDumpsDirectory(), filename)
   xcontext.response.setContentType("application/octet-stream");
   xcontext.response.setHeader("Content-Disposition", "attachment; filename=" + filename)
   def fos = xcontext.response.getOutputStream();
   FileUtils.copyFile(targetFile, fos)
   xcontext.setFinished(true);
  }

  public listHeapDumps() {
   def str = ""
   def repDir = getHeapDumpsDirectory();
   // force parent dir creation
   FileUtils.forceMkdir(repDir);
   for (file in repDir.listFiles()) {
    try {
     def filename = file.name;
     def sdate = filename.replaceAll("heapdump", "").replaceAll(".zip", "")
     def date = new Date(Long.parseLong(sdate))
     def text = services.localization.render("supporttools.downloadheapdump.reportfrom", [date])
     str += """* [[${text}&gt;&gt;||queryString="id=${file.name}"]]\n""";
    } catch (e) {
    }
   }
   return str;
  }

  public addXWikiFile(name) {
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     def sourceFile = new File(environment.getServletContext().getRealPath("/WEB-INF/" + name));
     FileUtils.copyFileToDirectory(sourceFile, targetDirectory)
  }

  public addXWikiPage(name) {    
     def db = xcontext.getContext().getDatabase();
     try {
      def renderedContent = xwiki.getDocument(name).getRenderedContent();
      addString(name + ".html", renderedContent);   
     } finally {
      xcontext.getContext().setDatabase(db);
     }
  }

  public addString(filename, str) {
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     FileUtils.writeStringToFile(new File(targetDirectory, filename), str);  
  }

  public addServerCommand(name, command) {
     def str = ""
     try {
      def proc = command.execute()               
      def sout = new StringBuffer()
      def serr = new StringBuffer()
      proc.consumeProcessOutput(sout, serr)
      proc.waitForOrKill(1000)
     
      str += "${ proc.exitValue()}\n"
      str += "stderr:\n ${serr}\n"
      str += "stdout:\n ${sout}\n"
     } catch (Throwable e) {
     str += e.getMessage();
     }
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     addString(name + ".txt", str);
  }

  public addWEBINFListing() {
    def path = environment.getServletContext().getRealPath(".")
    def command = "ls -lR ${path}/WEB-INF"
    addServerCommand("webinflisting", command);
  }

  public getTickets() {
   try {
    def url = "${serverURL}/xwiki/bin/view/SupportToolsCode/IssueListSheetJson?xpage=plain&amp;outputSyntax=plain&amp;status=all&amp;basicauth=1"
    def json = xwiki.getURLContent(url, clientUsername, clientPassword)
    def jsonSlurper = new JsonSlurper()
    return jsonSlurper.parseText(json)
   } catch(e) {
    e.printStackTrace();
debug("Exception: " + e.getMessage())
    return null;
   }
}


  public sendTicket(request) {
// send an additional configuration report
try {
if (request.ticket_attachreport=="1") {
if (sendReport()) {
   debug("Attached report");
} else {
   debug("Failed to send report");
}
}
} catch (e) {
   e.printStackTrace();
   debug("Failed to send report with exception " + e.getMessage());
}

try {
   def httpClient = getHttpClient()

   def post = new HttpPost("${serverURL}/xwiki/bin/view/SupportToolsCode/NewTicketFormJson?basicauth=1");
   
   def builder = MultipartEntityBuilder.create();
   builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
   for (field in ["subject", "type", "priority", "description"]) {
     def content = request.getParameter("ticket_${field}");
     if (field=="description" &amp;&amp; request.ticket_attachreport=="1")
      content += "\n\nAttached report: ${serverURL}/xwiki/bin/view/Reports/${clientName}${jobId}\n"
     builder.addPart("ticket_${field}", new StringBody(content));
   }
   builder.addPart("xpage", new StringBody("plain"));
   builder.addPart("outputSyntax", new StringBody("plain"));
   builder.addPart("basicauth", new StringBody("1"));

   def fu = xwiki.getPlugin("fileupload");
   for (fileItem in fu.getFileItems()) {
    if (fileItem.getName()!=null) {
     def isBody = new ByteArrayBody(fileItem.get(), ContentType.DEFAULT_BINARY, fileItem.getName())
     builder.addPart(fileItem.getFieldName(), isBody);
     debug("Added file name:" + fileItem.getName() + " field:" + fileItem.getFieldName());
    }
   }

   def entity = builder.build();
   //
   post.setEntity(entity);
   def handler = new BasicResponseHandler();
   def response = httpClient.execute(post, getAuthHttpContext());
   debug("Response code: " + response.getStatusLine().getStatusCode());
   String result = handler.handleResponse(response);
   debug("Response: " + result);
   def jsonSlurper = new JsonSlurper()
   def resultObj = jsonSlurper.parseText(result) 
   debug("Response: " + resultObj);
   return resultObj;
} catch (Throwable e) {
   debug("Exception: " + e.getMessage());
   e.printStackTrace();
   return null;
}
  }

}</content>
</xwikidoc>
