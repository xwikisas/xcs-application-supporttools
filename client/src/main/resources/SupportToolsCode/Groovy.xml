<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>SupportToolsCode</web>
  <name>Groovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1420066800000</creationDate>
  <date>1420066800000</date>
  <contentUpdateDate>1420066800000</contentUpdateDate>
  <version>1.1</version>
  <title>Support Tools Groovy Code</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>import org.xwiki.environment.Environment;
import org.apache.commons.io.FileUtils;
import java.util.zip.*;

import org.apache.http.client.*
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;
import org.apache.http.entity.*;
import org.apache.http.entity.mime.content.*;
import org.apache.http.entity.mime.*;
import org.apache.http.conn.ssl.*;
import org.apache.http.conn.scheme.Scheme;
import java.security.cert.*;
import java.security.SecureRandom;
import javax.net.ssl.*;

public class SupportTools {

  def REPORTVERSION = "1.0"
  def bypassSSLChecks = false;
  def defaultServerURL = "https://network.xwikisas.com/";
  def defaultClientName = "Unknown";
  def defaultClientPassword = "";
  
  def serverURL = defaultServerURL;
  def clientName = defaultClientName;
  def clientPassword = defaultClientPassword;
  def xwiki;
  def xcontext;
  def services;
  def jobId;
  def jobStarted = false;
  def environment;
  def debugMsg = "";
  def int BUFFER = 2048;

  public debug(msg) {
    debugMsg += msg + "\n";
    System.out.println(msg);
  }
  

  public setXWiki(xwiki, xcontext, services) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.services = services;
    this.environment = services.component.getInstance(Environment.class);

    def configDoc = xwiki.getDocument("SupportToolsCode.Config")
    serverURL = configDoc.getValue("server");
    clientName = configDoc.getValue("clientName");
    clientPassword = configDoc.getValue("clientPassword");
    if (serverURL == null || serverURL=="")
     serverURL = defaultServerURL;
    if (clientName == null || clientName == "")
     clientName = defaultClientName;
    if (clientPassword==null) 
     clientPassword = "";
  }

  public long startJob() {
    if (jobStarted)
     return -1;
    
    jobId = (new Date()).getTime();
    jobStarted = true;
    return jobId;
  }

  public endJob() {
    jobStarted = false;   
  } 

  public clearStorageDirectory() {

  }

  public getReportsDirectory() {
   return new File(environment.permanentDirectory, "/supporttools/");
  }

  public getStorageDirectory() {
    getStorageDirectory(jobId);
  }

  public getStorageDirectory(id) {
    return new File(environment.permanentDirectory, "/supporttools/" + id + "/");
  }

  public getReportFile(id) {
    return new File(getStorageDirectory(id), "report${id}.zip");
  }

  public downloadFile(id) {
    response.setContentType("application/octetstream");

  }

  /*
    Create a zip file out of all the files in the directory
  */
  public makeZip() {
   def wikiURL = xwiki.getDocument("Main.WebHome").getExternalURL();

   def strinfo = """reportVersion/${REPORTVERSION}
wiki: ${wikiURL}
client: ${clientName}
id: ${jobId}
xwikiVersion: ${xwiki.getVersion()}
"""
   // add info file
   addString("info.txt", strinfo);

     def targetFile = new File(getStorageDirectory(), "report${jobId}.zip");
     def dest = new FileOutputStream(targetFile);
     def zipout = new  ZipOutputStream(new BufferedOutputStream(dest)); 
     def sourceDir = new File(getStorageDirectory(), "/report/");
     def files = sourceDir.listFiles();
     def data = new byte[BUFFER];

     for (int i=0; i&lt;files.length; i++) {
        debug("Adding: " + files[i]);
        def fi = new FileInputStream(files[i]);
        def origin = new BufferedInputStream(fi, BUFFER);
        ZipEntry entry = new ZipEntry(files[i].getName());
        zipout.putNextEntry(entry);
        int count;
        while((count = origin.read(data, 0, 
              BUFFER)) != -1) {
               zipout.write(data, 0, count);
        }
        origin.close();
     }
     zipout.close();
  }

  public sendFile() {
try {
   def targetFile = new File(getStorageDirectory(), "report${jobId}.zip");
   def httpClient = HttpClientBuilder.create().build();

// This code is used for testing only using servers without proper SSL certificates
if (bypassSSLChecks) {
   def sslContext = SSLContext.getInstance("SSL");
   def tm = new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {

                        return null;
                    }

                    public void checkClientTrusted(
                            X509Certificate[] certs, String authType) {

                    }

                    public void checkServerTrusted(
                            X509Certificate[] certs, String authType) {

                    }
                }
   X509TrustManager[] tms = new X509TrustManager[1];
   tms[0] = tm;
   sslContext.init(null, tms, new SecureRandom());
   def socketFactory = new SSLConnectionSocketFactory(sslContext,SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
   httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();
}


   def post = new HttpPost(serverURL + "/xwiki/bin/view/Reports/NewReport");
   def fileBody = new FileBody(targetFile, ContentType.DEFAULT_BINARY);  
   def wikiURL = xwiki.getDocument("Main.WebHome").getExternalURL();
 
   // 
   def builder = MultipartEntityBuilder.create();
   builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
   builder.addPart("file", fileBody);
   builder.addPart("id", new StringBody("" + jobId));
   builder.addPart("client", new StringBody(clientName));
   builder.addPart("password", new StringBody(clientPassword));
   builder.addPart("wiki", new StringBody(wikiURL));
   builder.addPart("xwikiVersion", new StringBody(xwiki.getVersion()));
   builder.addPart("reportVersion", new StringBody(REPORTVERSION));
   builder.addPart("xpage", new StringBody("plain"));
   builder.addPart("outputSyntax", new StringBody("plain"));
   def entity = builder.build();
   //
   post.setEntity(entity);
   def handler = new BasicResponseHandler();
   def response = httpClient.execute(post);
   debug("Response code: " + response.getStatusLine().getStatusCode());
   String result = handler.handleResponse(response);
   debug("Response: " + result);
   if (result.startsWith("SUCCESS"))
    return true;
   else 
    return false;
} catch (Throwable e) {
   debug("Exception: " + e.getMessage());
   e.printStackTrace();
   return false;
}
  }

  public downloadReport(id) {
   def targetFile = getReportFile(id)
   xcontext.response.setContentType("application/octet-stream");
   xcontext.response.setHeader("Content-Disposition", "attachment; filename=report" + id + ".zip")
   xcontext.setFinished(true);
   def fos = response.getOutputStream();
   FileUtils.copyFile(targetFile, fos)
  }

  public listReports() {
   def str = ""
   def repDir = getReportsDirectory();
   for (file in repDir.listFiles()) {
    try {
     def date = new Date(Long.parseLong(file.name))
     str += """* [[Download report from ${date}&gt;&gt;||queryString="id=${file.name}"]]\n""";
    } catch (e) {
    }
   }
   return str;
  }

  public addXWikiFile(name) {
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     def sourceFile = new File(environment.getServletContext().getRealPath("/WEB-INF/" + name));
     FileUtils.copyFileToDirectory(sourceFile, targetDirectory)
  }

  public addXWikiPage(name) {    
     def renderedContent = xwiki.getDocument(name).getRenderedContent();
     addString(name + ".html", renderedContent);   
  }

  public addString(filename, str) {
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     FileUtils.writeStringToFile(new File(targetDirectory, filename), str);  
  }

  public addServerCommand(name, command) {
     def str = ""
     try {
     def proc = command.execute()               
     proc.waitFor()
     
     str += "${ proc.exitValue()}\n"
     str += "stderr:\n ${proc.err.text}\n"
     str += "stdout:\n ${proc.in.text}\n"
     } catch (Throwable e) {
     str += e.getMessage();
     }
     def targetDirectory  = new File(getStorageDirectory(), "/report/");
     addString(name + ".txt", str);
  }

  public addWEBINFListing() {
    def path = environment.getServletContext().getRealPath(".")
    def command = "ls -lR ${path}/WEB-INF"
    addServerCommand("webinflisting", command);
  }
}</content>
</xwikidoc>
