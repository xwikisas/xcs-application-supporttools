<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>SupportToolsCode</web>
<name>NewTicketFormJson</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1420066800000</creationDate>
<date>1420066800000</date>
<contentUpdateDate>1420066800000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>true</hidden>
<content>{{include document="SupportCode.JiraGroovy"/}}

{{groovy}}
import com.atlassian.jira.rpc.soap.client.*;
import org.apache.velocity.VelocityContext;

def jiraProxy = new JiraSessionObjects(xwiki);
def project = jiraProxy.jira.getProjectByKey(jiraProxy.token, jiraProxy.getProjectId());
def issueTypes = jiraProxy.jira.getIssueTypesForProject(jiraProxy.token, project.id.toString());

xwiki.context.put("jProject", project);
xwiki.context.put("jIssueTypes", issueTypes);

try {
  def issueSubj = request.ticket_subject;
  def issueType = request.ticket_type;
  if (!issueSubj &amp;&amp; !issueType) {
      def json = new groovy.json.JsonBuilder([ status : "error", exception : "no data"])
      println json.toPrettyString()
  } else {
    def formData = JiraUtil.getIssueData(request);
    def attachmentData = JiraUtil.getSubmittedAttachments(xwiki);
    def desc = formData.get('description');
    if (desc.equals('')) {
      desc = ' ';
    }
    def issueDesc = desc;
    def issuePriority = formData.get('priority');
    def issueComponent = formData.get('component');
    def fileNames = attachmentData.get('filenames');
    def fileData = attachmentData.get('filedata');	

    def newIssue = new RemoteIssue();
    newIssue.setProject(jiraProxy.getProjectId());
    newIssue.setType(issueType);
    newIssue.setPriority(issuePriority);
    newIssue.setSummary(issueSubj);
    newIssue.setDescription(issueDesc);
    def networkAccountDoc = xwiki.getDocument(services.networkcontext.getAccount(xcontext.user));
    def networkAccountObj = networkAccountDoc.getObject("XNCode.AccountClass");
    def networkAccountName = networkAccountDoc.name;
    def crtUserDoc = xwiki.getDocument(xcontext.user);

    // set Jira component
    def components = new RemoteComponent[1];
    for (component in jiraProxy.jira.getComponents(jiraProxy.token, newIssue.project)) {
      if (component.name == issueComponent) {
        components[0] = new RemoteComponent(component.id, component.name);
        newIssue.setComponents(components);
        break;
      }
    }
 
    def custFieldValues = new RemoteCustomFieldValue[3];

    // set Network Account custom field
    def custFieldId = jiraProxy.getCustomFieldId("Network Account");
    def accountValues = new String[2];
    accountValues[0] = networkAccountName;
    accountValues[1] = util.clearName(networkAccountObj.getProperty('name').value);
    custFieldValues[0] = new RemoteCustomFieldValue();
    custFieldValues[0].setCustomfieldId(custFieldId);
    custFieldValues[0].setValues(accountValues);
	
    // set Network Reporter custom field
    custFieldId = jiraProxy.getCustomFieldId("Network Reporter");
    def reporterIdValues = new String[1];
    reporterIdValues[0] = crtUserDoc.name;
    custFieldValues[1] = new RemoteCustomFieldValue();
    custFieldValues[1].setCustomfieldId(custFieldId);
    custFieldValues[1].setValues(reporterIdValues);
	
    // set Network URL custom field
    custFieldId = jiraProxy.getCustomFieldId("Network URL");
    def reporterUrlValues = new String[1];
    reporterUrlValues[0] = networkAccountDoc.getExternalURL();
    custFieldValues[2] = new RemoteCustomFieldValue();
    custFieldValues[2].setCustomfieldId(custFieldId);
    custFieldValues[2].setValues(reporterUrlValues);
	
    // create the issue on Jira server
    newIssue.setCustomFieldValues(custFieldValues);
    def returnedIssue = jiraProxy.jira.createIssue(jiraProxy.token, newIssue);
    def issueKey = returnedIssue.getKey();
    def issueURL = xwiki.getDocument('Support.TicketPage').getExternalURL('view', "ikey=${issueKey}");
	
    if (fileNames &amp;&amp; fileData) {
      jiraProxy.jira.addBase64EncodedAttachmentsToIssue(jiraProxy.token, issueKey, fileNames, fileData);
    }

    // once we have the issue ID, we set the network issue URL in JIRA
    def issueUrlValues = new String[1];
    issueUrlValues[0] = issueURL;
    JiraUtil.setIssueCustomFieldValues(jiraProxy, returnedIssue, "Network Issue URL", issueUrlValues);
    jiraProxy.jira.updateIssue(jiraProxy.token, issueKey, JiraUtil.prepareFieldsForUpdate(returnedIssue, null));

    // do e-mail notification
    def accountName = services.networkcontext.getAccount(xcontext.user)
    def adminEmails = xwiki.getDocument(accountName).display('admin_emails')
    def emailFrom = xcontext.context.getMessageTool().get('support.email')
    def emails = JiraUtil.getIssueContributorEmails(xwiki, accountName)
    def emailTo = emails.join(",")
    def emailCc = adminEmails
    def emailBcc = xwiki.null
    def emailLanguage = xcontext.language
    def emailTemplate = "SupportCode.EmailTemplateCreate"
    def vcontext = new VelocityContext()
    vcontext.put("user", xwiki.getLocalUserName(xcontext.user, false))
    vcontext.put("issueID", issueKey)
    vcontext.put("issueSummary", returnedIssue.summary)
    def encodedContent = xwiki.getXMLEncoded(returnedIssue.description)
    vcontext.put("issueDescription", encodedContent)
    vcontext.put("issueURL", xwiki.getDocument("Support.TicketPage").getExternalURL("view", "ikey=${issueKey}"))
    def sent = xwiki.mailsender.sendMessageFromTemplate(emailFrom, emailTo, emailCc, emailBcc, emailLanguage, emailTemplate, vcontext)
    def json = new groovy.json.JsonBuilder([ status : "success", id : issueKey, url : xwiki.getDocument("Support.TicketPage").getExternalURL("view", "ikey=${issueKey}")])
    println json.toPrettyString()
   }
 } catch (e) {
      e.printStackTrace();
      def json = new groovy.json.JsonBuilder([ status : "error", exception : e.getMessage()])
      println json.toPrettyString()
      throw e;
 }

{{/groovy}}
</content></xwikidoc>